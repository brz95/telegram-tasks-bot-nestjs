import {
  Ctx,
  Hears,
  InjectBot,
  Message,
  On,
  Start,
  Update,
} from 'nestjs-telegraf';
import { Telegraf } from 'telegraf';
import { actionButtons } from './app.buttons';
import { AppService } from './app.service';
import { showList } from './app.utils';
import { Context } from './context.interface';

@Update()
export class AppUpdate {
  constructor(
    @InjectBot() private readonly bot: Telegraf<Context>,
    private readonly appService: AppService,
  ) {}

  @Start()
  async startCommand(ctx: Context) {
    await ctx.reply('–ß—Ç–æ –í—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?', actionButtons());
  }

  @Hears('üìã –ú–æ–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á')
  async listTask(ctx: Context) {
    const tasks = await this.appService.getAllTasks();
    await ctx.reply(showList(tasks));
  }

  @Hears('üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É')
  async createTask(ctx: Context) {
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞—à–µ–π –∑–∞–¥–∞—á–∏: ');
    ctx.session.type = 'create';
  }

  @Hears('‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É')
  async doneTask(ctx: Context) {
    await ctx.reply('–ö–∞–∫—É—é –∑–∞–¥–∞—á—É –í—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å?');
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏: ');
    ctx.session.type = 'done';
  }

  @Hears('‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É')
  async deleteTask(ctx: Context) {
    await ctx.reply('–ö–∞–∫—É—é –∑–∞–¥–∞—á—É –í—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å?');
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏: ');
    ctx.session.type = 'delete';
  }

  @On('text')
  async getMessage(@Message('text') message: string, @Ctx() ctx: Context) {
    if (!ctx.session.type) return;

    if (ctx.session.type === 'create') {
      const tasks = await this.appService.createTask(message);
      await ctx.reply(showList(tasks));
    }

    if (ctx.session.type === 'done') {
      const tasks = await this.appService.doneTask(Number(message));
      if (!tasks) {
        await ctx.reply('–Ø –Ω–µ –Ω–∞—à–µ–ª —Ç–∞–∫–æ–π –∑–∞–¥–∞—á–∏ —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å üòï');
        return;
      }
      await ctx.reply(showList(tasks));
    }

    if (ctx.session.type === 'delete') {
      const tasks = await this.appService.deleteTask(Number(message));
      if (!tasks) {
        await ctx.reply('–Ø –Ω–µ –Ω–∞—à–µ–ª —Ç–∞–∫–æ–π –∑–∞–¥–∞—á–∏ —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å üòï');
        return;
      }
      await ctx.reply(showList(tasks));
    }
  }
}
